package jShell.interfaces;

import java.util.Collection;
import jShell.Errors.NodeExistsException;

public interface IDirectory extends IFileSystemNode{
	
	  public boolean tryAddChildren(IFileSystemNode n) throws NodeExistsException;
		  
	  /**
	   * remove a child of the parent directory 
	   * @param The FileSystemNode to be removed.
	   */
	  public void removeChild(IFileSystemNode n);

	  /**
	   * Returns true or false for if a child exists in a directory object
	   * 
	   * @param Key to search for hashamp
	   * @return boolean value indicating whether child is in directory hashmap
	   * true for if key is in hashamp and false otherwise
	   **/
		  
	  public boolean ifChildExists(String name);

	  /**
	   * Returns a child object provided it exists, otherwise returns null
	   * 
	   * @param String: name of the object you want to return
	   * @return FileSystemNode either the child directory or file
	   **/
	  public IFileSystemNode getChild(String name);

	  /**
	   * Returns all the children of a particular Directory object. 
	   * Empty Collection if a directory has no children.
	   * 
	   * @return Collection of FileSystemNode objects, 
	   * either the child directories or files
	   */

	 public Collection<IFileSystemNode> getChildren();

	 /**
	  * Remove node from the list of children and return reference to it. If child with given name
	  * does not exist, return null instead
	  * @param name Name of node being deleted
	  * @return reference to the node being deleted; null, if deletion fails
	  */
	 public IFileSystemNode removeChild(String name);


}
