package test;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import jShell.Errors.ArgsNumberException;
import jShell.Errors.DirNotFoundException;
import jShell.Errors.InvalidPathException;
import jShell.Errors.MoveDirException;
import jShell.Errors.NodeExistsException;
import jShell.Errors.SuccessorException;
import jShell.Errors.UnknownErrorException;
import jShell.commands.Mv;
import jShell.fileSystem.Path;
import jShell.mockClasses.MockFileSystem;
import jShell.mockClasses.MockShell;

/**
 * Test cases for the Mv command.
 * 
 * @author Raz Ben Haim
 *
 */
public class MvTest {
  MockShell shell;
  Mv mv;


  @Before
  public void setUp() throws Exception {
    shell = new MockShell();
    mv = new Mv();
  }

  @Test
  public void testToString() {
    assertEquals("mv", mv.toString());
  }

  @Test(expected = ArgsNumberException.class)
  public void testTooManyArgs() throws ArgsNumberException,
      InvalidPathException, DirNotFoundException, NodeExistsException,
      MoveDirException, SuccessorException {
    String[] params = {"mv", "a", "b", "c"};
    try {
      mv.run(params);
    } catch (InvalidPathException | NodeExistsException
        | UnknownErrorException e) {
      fail("Shouldnt throw these exceptions");
      e.printStackTrace();
    }
  }

  @Test
  public void testTwoDirs() throws MoveDirException, SuccessorException {
    String[] params = {"cp", MockFileSystem.validDirRelativePath,
        MockFileSystem.validAnotherDirFullPath};
    try {
      mv.run(params);
      Path test =new Path(MockFileSystem.validDirRelativePath);
      String sometiung = test.getBottomName();
      assertTrue(!MockFileSystem.workingDir.ifChildExists(sometiung));
      assertTrue(!MockFileSystem.anotherDir.ifChildExists(
          (new Path(MockFileSystem.validDirRelativePath).getBottomName())));
    } catch (InvalidPathException | ArgsNumberException | NodeExistsException
        | UnknownErrorException e) {
      fail("Shouldnt throw anything.");
      e.printStackTrace();
    }
  }
  
  @Test
  public void testTwoFiles() {
    
  }
  
  @Test
  public void testNestedFileAndDir() {
    
  }

  @After
  public void tearDown() throws Exception {}

  @Test
  public void testTwoDir() {
    // fail("Not yet implemented");
  }

}
