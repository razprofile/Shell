package jShell.mockClasses;

import java.util.ArrayList;
import java.util.Collection;
import jShell.fileSystem.Path;
import jShell.interfaces.*;

public class MockDirectory implements IDirectory {
    
  String name;
  
  public MockDirectory() {
    this.name = "someDir";
  }
  
  public MockDirectory(String name) {
    this.name = name;
  }
  
  @Override
  public String getName() {
    return name;
  }

  @Override
  public void setName(String name) {
    this.name = name;
  }

  @Override
  public IPath getPath() {
    if (this == MockFileSystem.workingDir) {
      return new Path(MockFileSystem.workingDirFullPath);
    }
    if (this == MockFileSystem.childDir) {
      return new Path(MockFileSystem.workingDirFullPath);
    }
    
    return new MockPath("this/is/a/path/to/mockDir");
  }

  @Override
  public IFileSystemNode clone() {
    return new MockDirectory(this.name);
  }

  @Override
  public boolean tryAddChildren(IFileSystemNode n) {
    if (this == MockFileSystem.rootDir && 
        n.getName().equals(MockFileSystem.workingDir.getName())) {
      return false;
    }
    
    if (this == MockFileSystem.workingDir && (
        n.getName().equals(MockFileSystem.childDir.getName()) 
        || n.getName().equals(MockFileSystem.childFile.getName()))) {
          return false;
        }
    
    return true;
  }

  @Override
  public void removeChild(IFileSystemNode n) {
  }

  @Override
  public boolean ifChildExists(String name) {
    if (this == MockFileSystem.rootDir && 
        name.equals(MockFileSystem.workingDir.getName())) {
      return true;
    }
    
    if (this == MockFileSystem.workingDir && 
        (name.equals(MockFileSystem.childDir.getName()) 
            || name.equals(MockFileSystem.childFile.getName()))) {
      return true;
    }
    
    return false;
  }

  @Override
  public IFileSystemNode getChild(String name) {

    if (this == MockFileSystem.rootDir && 
        name.equals(MockFileSystem.workingDir.getName())) {
      return MockFileSystem.workingDir;
    }
    
    if (this == MockFileSystem.workingDir && 
        name.equals(MockFileSystem.childDir.getName())) {
      return MockFileSystem.childDir;
    }
    
    if (this == MockFileSystem.workingDir && 
        name.equals(MockFileSystem.childFile.getName())) {
      return MockFileSystem.childFile;
    }
    
    return null;
    
  }

  @Override
  public Collection<IFileSystemNode> getChildren() {
      Collection<IFileSystemNode> result = new ArrayList<IFileSystemNode>();; 
      
      if (this == MockFileSystem.rootDir) {
        result.add(MockFileSystem.workingDir);
      }
      
      if (this == MockFileSystem.workingDir) {
        result.add(MockFileSystem.childDir);
        result.add(MockFileSystem.childFile);
      }
      
      return result;
  }

  @Override
  public IFileSystemNode removeChild(String name) {
    
    if (this.getChild(name)!=null) {
      IShell.getShell().outputToShellln("Removing a node with name " + name 
          + "from node with name " + this.name);
    }
    return this.getChild(name);
    
  }
  
  

}
