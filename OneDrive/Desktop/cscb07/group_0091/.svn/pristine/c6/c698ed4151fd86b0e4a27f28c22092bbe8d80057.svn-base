package test;

import static org.junit.Assert.*;
import org.junit.Test;
import jShell.Errors.ArgsNumberException;
import jShell.Errors.BadFileNameException;
import jShell.Errors.DeleteRootDirException;
import jShell.Errors.FileNotFoundException;
import jShell.Errors.InvalidPathException;
import jShell.Errors.NodeExistsException;
import jShell.Errors.RedirectionException;
import jShell.Errors.RedirectionOperatorsException;
import jShell.Errors.WorkingDirException;
import jShell.commands.Rm;
import jShell.commands.Tree;
import jShell.mockClasses.MockFileSystem;
import jShell.mockClasses.MockShell;

public class TreeTest {
  
  MockShell s = new MockShell();
  Tree t = new Tree();

  @Test(expected = ArgsNumberException.class)
  public void testTooManyArgs() throws InvalidPathException, ArgsNumberException, NodeExistsException, BadFileNameException, RedirectionOperatorsException, FileNotFoundException, RedirectionException {
    String[] params = {"tree", "a"};
    t.run(params);
  }
  
  @Test(expected = BadFileNameException.class)
  public void testRedirectionWithInvalidFileName() throws InvalidPathException, NodeExistsException, BadFileNameException, RedirectionOperatorsException, FileNotFoundException, ArgsNumberException, RedirectionException {
    String[] params = {"tree",">","!"};
    t.run(params);
  }
  
  @Test
  public void testValidTree() throws InvalidPathException, NodeExistsException, BadFileNameException, RedirectionOperatorsException, FileNotFoundException, ArgsNumberException, RedirectionException {
    String[] params = {"tree"};
    t.run(params);
    assertEquals(s.getShell().getFileSystem().toString(), t.run(params));
  }
  
  @Test
  public void testValidRedirection() throws InvalidPathException, NodeExistsException, BadFileNameException, RedirectionOperatorsException, FileNotFoundException, ArgsNumberException, RedirectionException {
   String[] params = {"tree",">","childFile"};
   t.run(params);
   String outputMessageOverWrite = "Redirecting output for overwriting:" + s.getShell().getFileSystem().toString()
       + "\n to file with name: " + "childFile";
   assertEquals(outputMessageOverWrite, s.getLastOutput());
   
   //testing append
   String[] params2 = {"tree",">>","childFile"};
   t.run(params2);
   String outputMessageAppend = "Redirecting output for appending:" + s.getShell().getFileSystem().toString()
       + "\n to file with name: " + "childFile";
   assertEquals(outputMessageAppend, s.getLastOutput());
  }
  
  @Test(expected = RedirectionException.class)
  public void testInValidRedirection() throws InvalidPathException, NodeExistsException, BadFileNameException, RedirectionOperatorsException, FileNotFoundException, ArgsNumberException, RedirectionException {
    String[] params = {"tree","childFile","a"};
    t.run(params);
  }

}
