package test;

import static org.junit.Assert.*;
import org.junit.Test;
import org.junit.Before;
import jShell.Errors.*;
import jShell.mockClasses.MockFileSystem;
import jShell.mockClasses.MockShell;
import jShell.commands.Mkdir;

public class MkdirTest {

  MockShell shell;
  Mkdir mkdir;
  
  @Before
  public void init() {
    shell = new MockShell();
    mkdir = new Mkdir();
  }
  
  
  @Test
  public void testMkdirWithNoArguments() {
    String[] args = {"mkdir"};
    try {
      mkdir.run(args);
      fail();
    }catch(ArgsNumberException e) {
      return ;
    }catch(Exception e) {
      fail();
    }
  }
  
  @Test
  public void testMkdirDirectoryExist() {
    try {
      String[] arguments1 = {"mkdir", MockFileSystem.validDirFullPath};
      mkdir.run(arguments1);
      fail();
    }catch(NodeExistsException e) {
      
    }catch(Exception e) {
      fail();
    }
    
    try {
      String[] arguments2 = {"mkdir", MockFileSystem.validDirRelativePath};
      mkdir.run(arguments2);
      fail();
    }catch(NodeExistsException e) {
      
    }catch(Exception e) {
      fail();
    }
    try {
      String[] arguments3 = {"mkdir", MockFileSystem.validFileFullPath};
      mkdir.run(arguments3);
      fail();
    }catch(NodeExistsException e) {

    }catch(Exception e) {
      fail();
    }
    
    try {
      String[] arguments4 = {"mkdir", MockFileSystem.validFileRelativePath};
      mkdir.run(arguments4);
      fail();
    }catch(NodeExistsException e) {

    }catch(Exception e) {
      fail();
    }
    
    return ;
  }
  
  @Test
  public void testRunInvalidPath() {
    try {
      String[] arguments = {"mkdir", "some/invalid/path"};
      mkdir.run(arguments);
      fail();
    } catch(InvalidPathException e) {
      return ;
    } catch(Exception e) {
      fail();
    }
  }
  
  @Test
  public void testRunValidPath() {
    try {
    String[] arguments = {"mkdir", MockFileSystem.validDirFullPath + "/newDir"};
    mkdir.run(arguments);
    }catch(Exception e) {
      fail();
    }
    
    return ;
  }
  
  
  
}
