package jShell;

import java.util.Arrays;

public class Mkdir extends Command{
	
	
	/**
	 * Create a new directory at a given path, assuming specified path is valid and exists
	 * 
	 * @param args arguments for mkdir command
	 */
	public void run(String args[]) {
		//Getting rid of the first argument which is command's name
		args = Arrays.copyOfRange(args, 1, args.length);
		
		//If arguments passed are not valid, do not execute command
		if (!isValid(args)) {
			return ;
		}
		
		/*
		 * Creating a new directory
		 */
		
		//Path of the directory to be created
		Path path = new Path(args[0]);
		
		//Getting the location of the directory that is being modified
		Path location = path.getParentPath();
		
		//Name of directory that is being created
		Directory newDir = new Directory(path.getBottomName());
		
		if (location.isValidFullPath()) {
			//Adding to a full path
			Shell.getShell().getFileSystem().addToLocationAtFullPath(newDir, location);
		} else {
			//Adding to a relative paths
			Shell.getShell().getFileSystem().addToLocationAtRelativePath(newDir, location);
		} 
		
	}
	
	/**
	 * Return true if arguments in args are valid, and return false otherwise. 
	 * If arguments are invalid, print an error message.
	 * 
	 * @param args
	 * @return true, if arguments args are valid
	 */
	private boolean isValid(String args[]) {
		
		Error e = new Error();
		
		//Checking if exactly one argument is passed 
		if (args.length != 1) {
			Shell.getShell().outputToShellln(e.errorMessage("WRONGARGS"));
			return false;
		}
		
		//Path of the directory to be created
		Path path = new Path(args[0]);
		
		//Getting the location of the directory that is being modified
		Path location = path.getParentPath();
		
		//Checking if given location corresponds to a valid location at current file tree
		if (!location.isValidFullPath() && !location.isValidRelativePath()) {
			Shell.getShell().outputToShellln(e.errorMessage("PATHNOTFOUND"));
			return false;
		}
		
		//Checking if specified location is a directory, not a file
		if (!location.isFullPathEndingWithDirectory() && !location.isRelativePathEndingWithDirectory()) {
			Shell.getShell().outputToShellln(e.errorMessage("PATHNOTFOUND"));
			return false;
		}
		
		//Checking if directory with given name already exists
		if (path.isValidFullPath() || path.isValidRelativePath()) {
			Shell.getShell().outputToShellln(e.errorMessage("EXISTS"));
			return false;
		}
		
		return true;
	}

}
