// **********************************************************
// Assignment2:
// Student1:
// UTORID user_name: benhaimr
// UT Student #: 1006139830
// Author: Raz Ben Haim
//
// Student2:
// UTORID user_name: sharm697
// UT Student #: 1002352465
// Author: Sankalp Sharma
//
// Student3:
// UTORID user_name: voitovyc
// UT Student #: 1005735563
// Author: Oleksandr Voitovych
//
// Student4:
// UTORID user_name: meharch6
// UT Student #: 1003963570
// Author: Kevin Meharchand
//
//
// Honor Code: I pledge that this program represents my own
// program code and that I have coded on my own. I received
// help from no one in designing and debugging my program.
// I have also read the plagiarism section in the course info
// sheet of CSC B07 and understand the consequences.
// *********************************************************

package test;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import org.junit.Before;
import org.junit.Test;
import jShell.fileSystem.Directory;
import jShell.Shell;
import jShell.commands.Find;

public class FindTest {

  Shell s;
  Find f;
  Directory root;
  Directory test;
  Directory t;

  @Before
  public void createDirs() {
    s = new Shell();
    f = new Find();
    root = (Directory) s.getFileSystem().getRootDir();
    test = new Directory("test");
    t = new Directory("test");
    root.tryAddChildren(test);
    root.tryAddChildren(t);
    test.tryAddChildren(new Directory("test1"));
    t.tryAddChildren(new Directory("t1"));
  }

  @Test
  public void testRun() {
    String[] params = {"find", "-type", "d", "-name", "\"test\""};
    assertEquals(f.run(params), "/test");
  }

  @Test
  public void testRedirectionRun() {
    String[] params =
        {"find", "-type", "d", "-name", "\"test\"", ">", "file"};
    assertEquals(f.run(params), "");
    assertTrue(root.ifChildExists("file"));
  }
}
