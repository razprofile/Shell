package jShell.commands;

import java.util.HashMap;
import jShell.Error;
import jShell.File;
import jShell.FileSystem;
import jShell.FileSystemNode;
import jShell.Path;
import jShell.Shell;

/**
 * A class to implement the Popd command (Remove the top entry from the
 * directory stack, and cd into it).
 * 
 * @author Raz
 */
public class Popd extends Command {

	@Override
	public void run(String[] args) {

		// If stack is empty, print a corresponding error message
		if (Shell.getShell().getUserData().getPathStack().empty()) {
			Error e = new Error();
			Shell.getShell().outputToShellln(e.errorMessage("EMPTYSTACK"));
			return;
		}
		// Else, pop the last item from the stack and cd into it
		Shell.getShell().getUserData().setCurPath(Shell.getShell().getUserData().getPathStack().pop());
		;
	}

	@Override
	public HashMap<String, String> isValid(String[] args) {

		// HashMap to map every argument by an error it caused
		HashMap<String, String> errors = new HashMap<String, String>();

		// Checking if correct number of arguments is passed
		if (args.length != 1) {
			errors.put("all", "WRONGARGS");
			return errors;
		}

		// Checking that stack is not empty
		if (Shell.getShell().getUserData().getPathStack().empty()) {
			errors.put("all", "EMPTYSTACK");
		}

		return errors;
	}

	@Override
	public String toString() {

		return "popd";

	}

}
