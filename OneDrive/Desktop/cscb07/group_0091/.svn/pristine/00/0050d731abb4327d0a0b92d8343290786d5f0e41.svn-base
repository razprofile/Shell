package jShell.commands;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Locale;

import javax.speech.AudioException;
import javax.speech.Central;
import javax.speech.EngineException;
import javax.speech.EngineStateError;
import javax.speech.synthesis.Synthesizer;
import javax.speech.synthesis.SynthesizerModeDesc;

import jShell.Shell;

/**
 * A class to implement the speak command (speaks convert text to audible speech).
 * 
 * @author Raz
 */
public class Speak extends Command {

  /**
   * Deallocates the synthesizer
   */
  public void shutDown() {
    try {
      synthesizer.deallocate();
    } catch (EngineException | EngineStateError e) {
      e.printStackTrace();
    }
  }

  private Synthesizer synthesizer;

  /**
   * Constructor for the Speak class. Sets up the main properties, handles errors, initialize the
   * synthesizer
   */
  public Speak() {
    // Set property as Kevin Dictionary
    System.setProperty("freetts.voices",
        "com.sun.speech.freetts.en.us" + ".cmu_us_kal.KevinVoiceDirectory");
    try {
      Central.registerEngineCentral("com.sun.speech.freetts" + ".jsapi.FreeTTSEngineCentral");

      synthesizer = Central.createSynthesizer(new SynthesizerModeDesc(Locale.US));

      // Allocate synthesizer
      synthesizer.allocate();
    } catch (IllegalArgumentException e) {
      e.printStackTrace();
    } catch (EngineException e) {
      e.printStackTrace();
    }

  }

  /**
   * Process the args of the speak command, and acts accordingly
   * 
   * @param The String arguments that were typed in the shell.
   */
  public void run(String[] args) {
    if (args.length == 1) {
      String input = "";
      ArrayList<String> speak = new ArrayList<String>();
      while (true) {
        Shell.getShell().outputToShell("$");
        input = Shell.getShell().getUserInput().replaceAll("\\s+", " ");
        if (input.endsWith(" " + "QUIT")) {
          input = input.replace(" QUIT", "");
          speak.add(input);
          break;
        }
        if (input.equals("QUIT")) {
          break;
        }
        speak.add(input);
      }
      try {
        synthesizer.resume();
        speak.forEach(x -> speak(x));
        synthesizer.waitEngineState(Synthesizer.QUEUE_EMPTY);
      } catch (IllegalArgumentException | InterruptedException | AudioException
          | EngineStateError e) {
        e.printStackTrace();
      }
    } else {
      speak(String.join(" ", Arrays.copyOfRange(args, 1, args.length)));

    }

  }

  /**
   * Speak out loud the specified arg.
   * 
   * @param arg The string to be spoken
   */
  private void speak(String arg) {
    synthesizer.speakPlainText(arg, null);
  }

  @Override
  public HashMap<String, String> isValid(String[] args) {
    //HashMap to map every argument by an error it caused
    HashMap<String, String> errors = new HashMap<String, String>();

    // Checking that, if second argument is specified, it is a valid string
    if (args.length > 1 && !(args[1].startsWith("\"") && args[args.length - 1].endsWith("\""))) {
      errors.put(args[1], "BADSTRING");
    }

    return errors;

  }

  @Override
  public String toString() {

    return "speak";

  }

}
