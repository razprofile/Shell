// **********************************************************
// Assignment2:
// Student1:
// UTORID user_name: benhaimr
// UT Student #: 1006139830
// Author: Raz Ben Haim
//
// Student2:
// UTORID user_name: sharm697
// UT Student #: 1002352465
// Author: Sankalp Sharma
//
// Student3:
// UTORID user_name: voitovyc
// UT Student #: 1005735563
// Author: Oleksandr Voitovych
//
// Student4:
// UTORID user_name: meharch6
// UT Student #: 1003963570
// Author: Kevin Meharchand
//
//
// Honor Code: I pledge that this program represents my own
// program code and that I have coded on my own. I received
// help from no one in designing and debugging my program.
// I have also read the plagiarism section in the course info
// sheet of CSC B07 and understand the consequences.
// *********************************************************

package test;

import static org.junit.Assert.*;
import org.junit.Test;
import jShell.Errors.ArgsNumberException;
import jShell.Errors.DeleteRootDirException;
import jShell.Errors.InvalidPathException;
import jShell.Errors.RemovingFileException;
import jShell.Errors.WorkingDirException;
import jShell.commands.Rm;
import jShell.mockClasses.MockFileSystem;
import jShell.mockClasses.MockShell;

public class RmTest {

  MockShell s = new MockShell();
  Rm r = new Rm();

  @Test(expected = DeleteRootDirException.class)
  public void testRemovingRootDir() throws WorkingDirException, 
  InvalidPathException, DeleteRootDirException, ArgsNumberException, RemovingFileException {
    String[] params = {"rm", MockFileSystem.fullPathRoot};
    r.run(params);
  }

  @Test(expected = ArgsNumberException.class)
  public void testTooManyArgs() throws WorkingDirException, InvalidPathException,
      DeleteRootDirException, ArgsNumberException, RemovingFileException {
    String[] params = {"rm", "a", "b"};
    r.run(params);
  }

  @Test(expected = WorkingDirException.class)
  public void testDeleteWorkingDirectory() throws WorkingDirException, 
  InvalidPathException, DeleteRootDirException, ArgsNumberException, RemovingFileException {
    String[] params = {"rm", MockFileSystem.workingDirFullPath};
    r.run(params);
  }

  @Test
  public void testValidRm() throws WorkingDirException, InvalidPathException,
      DeleteRootDirException, ArgsNumberException, RemovingFileException {
    String[] params = {"rm", MockFileSystem.validDirFullPath};
    r.run(params);
    assertEquals(s.getLastOutput(),
        "Removed a node at path " + MockFileSystem.validDirFullPath + "\n");
  }

  @Test
  public void testValidRmRelative() throws WorkingDirException, 
  InvalidPathException, DeleteRootDirException, ArgsNumberException, RemovingFileException {
    String[] params = {"rm", MockFileSystem.validDirRelativePath};
    r.run(params);
    assertEquals(s.getLastOutput(),
        "Removed a node at path " + MockFileSystem.validDirFullPath + "\n");
  }

  @Test
  public void testValidRmAtAnotherDir() throws WorkingDirException, 
  InvalidPathException, DeleteRootDirException, ArgsNumberException, RemovingFileException {
    String[] params = {"rm", MockFileSystem.validAnotherDirFullPath};
    r.run(params);
    assertEquals(s.getLastOutput(),
        "Removed a node at path " + MockFileSystem.validAnotherDirFullPath + "\n");
    // testing its child
    String[] params2 = {"rm", MockFileSystem.validAnotherChildDirFullPath};
    r.run(params2);
    assertEquals(s.getLastOutput(),
        "Removed a node at path " + MockFileSystem.validAnotherChildDirFullPath + "\n");
  }
  
  @Test
  public void testRemovingFile() throws WorkingDirException, InvalidPathException, DeleteRootDirException, ArgsNumberException, RemovingFileException {
    String[] params = {"rm", MockFileSystem.validFileFullPath};
    r.run(params);
    assertEquals(s.getLastOutput(),"Trying to remove standalone file" + "\n");
  }

  @Test
  public void testToString() {
    assertEquals("rm", r.toString());
  }
}
