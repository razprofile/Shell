package jShell;

public class Man extends Command {

  /*
   * TO DO:
   * - Testing
   */
    @Override
    public void run(String[] args) {
      Error e = new Error();
      // Check that another argument was actually entered
      if (args.length == 1) {
        Shell.getShell().OutputToShellln(e.errorMessage("WRONGARGS"));
        return;
      }
      // Find which command was asked for
      String[] commandList = {"cd", "cat", "echo", "exit", "history", "ls",
          "man", "mkdir", "popd", "pushd", "pwd", "speak"};
      for (String currentCommand : commandList) {
        if (args[1].toLowerCase().equalsIgnoreCase(currentCommand)) {
          this.manual(args[1], Shell.getShell());
          return;
        }
    }
      // Can be changed to whatever shell output
      Shell.getShell().OutputToShellln((e.errorMessage("NOCOMMAND")));
  }

  private void manual(String command, Shell s) {
    //Print the appropriate documentation based on the given command
    // ~~~~~~~~~~~~~~~~~~~ cd ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    if (command.equalsIgnoreCase("cd")) {
      Shell.getShell().OutputToShellln("~~~~~~~~~~~~~~~~~~~~");
      Shell.getShell().OutputToShellln("The cd Command:");
      Shell.getShell().OutputToShellln("");
      Shell.getShell().OutputToShellln("Usage: cd [DIRECTORY]");
      Shell.getShell().OutputToShellln("This command will change the current directory"
          + " to 'DIRECTORY'. DIRECTORY may be relative to the current"
          + " directory, or it may be a full path.");
      Shell.getShell().OutputToShellln("");
      Shell.getShell().OutputToShellln("Similarly to Unix and other shells, .. indicates"
          + " a parent directory and . indicates the current directory");
      Shell.getShell().OutputToShellln("~~~~~~~~~~~~~~~~~~~~");
    }  else if (command.equalsIgnoreCase("cat")) {
      // ~~~~~~~~~~~~~~~~~~~ cat ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      Shell.getShell().OutputToShellln("~~~~~~~~~~~~~~~~~~~~");
      Shell.getShell().OutputToShellln("The cat Command:");
      Shell.getShell().OutputToShellln("");
      Shell.getShell().OutputToShellln("Usage: cat FILE1 [FILE2 FILE3 ...]");
      Shell.getShell().OutputToShellln("This command will print out the contents of all"
          + " files indicated (minimum 1) concatenated in the shell.");
      Shell.getShell().OutputToShellln("");
      Shell.getShell().OutputToShellln("FILE can be a file name in the current working"
          + " directory, or it can be a partial or full path to another"
          + " file in another directory.");
      Shell.getShell().OutputToShellln("~~~~~~~~~~~~~~~~~~~~");
    }  else if (command.equalsIgnoreCase("echo")) {
      // ~~~~~~~~~~~~~~~~~~~ echo ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      Shell.getShell().OutputToShellln("~~~~~~~~~~~~~~~~~~~~");
      Shell.getShell().OutputToShellln("The echo Command:");
      Shell.getShell().OutputToShellln("");
      Shell.getShell().OutputToShellln("Usage: echo STRING [> FILE]");
      Shell.getShell().OutputToShellln("Usage: echo STRING [>> FILE]");
      Shell.getShell().OutputToShellln("");
      Shell.getShell().OutputToShellln("This command has multiple variants.");
      Shell.getShell().OutputToShellln("Variant 1: echo STRING");
      Shell.getShell().OutputToShellln("Simply prints out the given STRING back into the"
          + " shell.");
      Shell.getShell().OutputToShellln("");
      Shell.getShell().OutputToShellln("Variant 2: echo STRING > FILE");
      Shell.getShell().OutputToShellln("Takes the given STRING and writes it into the"
          + " given FILE, overwriting the contents of FILE if it exists"
          + " and creating FILE if it doesn't.");
      Shell.getShell().OutputToShellln("");
      Shell.getShell().OutputToShellln("Variant 3: echo STRING >> FILE");
      Shell.getShell().OutputToShellln("Takes the given STRING and appends it to the"
          + " end of the current contents of FILE. This variant will also"
          + " create FILE if it does not exist.");
      Shell.getShell().OutputToShellln("~~~~~~~~~~~~~~~~~~~~");
    }   else if (command.equalsIgnoreCase("exit")) {
      // ~~~~~~~~~~~~~~~~~~~ exit ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      Shell.getShell().OutputToShellln("~~~~~~~~~~~~~~~~~~~~");
      Shell.getShell().OutputToShellln("The exit Command:");
      Shell.getShell().OutputToShellln("");
      Shell.getShell().OutputToShellln("Usage: exit");
      Shell.getShell().OutputToShellln("");
      Shell.getShell().OutputToShellln("The exit command closes the shell entirely. Nothing"
          + " else to see here!");
      Shell.getShell().OutputToShellln("~~~~~~~~~~~~~~~~~~~~");
    }  else if (command.equalsIgnoreCase("history")) {
      // ~~~~~~~~~~~~~~~~~~~ history ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      Shell.getShell().OutputToShellln("~~~~~~~~~~~~~~~~~~~~");
      Shell.getShell().OutputToShellln("The history Command:");
      Shell.getShell().OutputToShellln("");
      Shell.getShell().OutputToShellln("Usage: history [NUMBER]");
      Shell.getShell().OutputToShellln("");
      Shell.getShell().OutputToShellln("The history command prints out into the shell a "
          + "list of the most recently entered commands. This list can be"
          + " shortened by adding a number after the command. If no number"
          + " is specified, then all commands up to and including the "
          + "current instance of history command will be listed.");
      Shell.getShell().OutputToShellln("~~~~~~~~~~~~~~~~~~~~");
    }  else if (command.equalsIgnoreCase("ls")) {
      // ~~~~~~~~~~~~~~~~~~~ ls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      Shell.getShell().OutputToShellln("~~~~~~~~~~~~~~~~~~~~");
      Shell.getShell().OutputToShellln("The ls Command:");
      Shell.getShell().OutputToShellln("");
      Shell.getShell().OutputToShellln("Usage: ls [PATH ...]");
      Shell.getShell().OutputToShellln("");
      Shell.getShell().OutputToShellln("The ls command prints out to the shell the contents"
          + " of the current directory if no PATH is specified.");
      Shell.getShell().OutputToShellln("");
      Shell.getShell().OutputToShellln("If a PATH is specified, ls will print out the"
          + " contents of the specified directory at the path.");
      Shell.getShell().OutputToShellln("");
      Shell.getShell().OutputToShellln("If the given PATH ends at a file, the contents of"
          + " that file will be printed to the shell instead.");
      Shell.getShell().OutputToShellln("");
      Shell.getShell().OutputToShellln("Multiple PATHs may be included after the first."
          + " If so, the contents of each will be displayed in the order"
          + " given.");
      Shell.getShell().OutputToShellln("~~~~~~~~~~~~~~~~~~~~");
    }  else if (command.equalsIgnoreCase("man")) {
      // ~~~~~~~~~~~~~~~~~~~ man ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      Shell.getShell().OutputToShellln("~~~~~~~~~~~~~~~~~~~~");
      Shell.getShell().OutputToShellln("The man Command:");
      Shell.getShell().OutputToShellln("");
      Shell.getShell().OutputToShellln("Usage: man COMMAND");
      Shell.getShell().OutputToShellln("");
      Shell.getShell().OutputToShellln("The man command prints out the documentation for"
          + " a given COMMAND into the shell.");
      Shell.getShell().OutputToShellln("~~~~~~~~~~~~~~~~~~~~");
    }  else if (command.equalsIgnoreCase("mkdir")) {
      // ~~~~~~~~~~~~~~~~~~~ mkdir ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      Shell.getShell().OutputToShellln("~~~~~~~~~~~~~~~~~~~~");
      Shell.getShell().OutputToShellln("The mkdir Command:");
      Shell.getShell().OutputToShellln("");
      Shell.getShell().OutputToShellln("Usage: mkdir DIRECTORY");
      Shell.getShell().OutputToShellln("");
      Shell.getShell().OutputToShellln("The mkdir command creates a user-given DIRECTORY at"
          + " the user-specified path.");
      Shell.getShell().OutputToShellln("DIRECTORY may be either a full path or a path"
          + " relative to the current directory.");
      Shell.getShell().OutputToShellln("~~~~~~~~~~~~~~~~~~~~");
    }  else if (command.equalsIgnoreCase("popd")) {
      // ~~~~~~~~~~~~~~~~~~~ popd ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      Shell.getShell().OutputToShellln("~~~~~~~~~~~~~~~~~~~~");
      Shell.getShell().OutputToShellln("The popd Command:");
      Shell.getShell().OutputToShellln("");
      Shell.getShell().OutputToShellln("Usage: popd");
      Shell.getShell().OutputToShellln("");
      Shell.getShell().OutputToShellln("The popd command removes the top directory stored"
          + " in the directory stack (see pushd) and changes the "
          + " current working directory to said directory.");
      Shell.getShell().OutputToShellln("If there are no directories stored in the stack, "
          + "then popd will not move the user's current directory.");
      Shell.getShell().OutputToShellln("~~~~~~~~~~~~~~~~~~~~");
    }  else if (command.equalsIgnoreCase("pushd")) {
      // ~~~~~~~~~~~~~~~~~~~ pushd ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      Shell.getShell().OutputToShellln("~~~~~~~~~~~~~~~~~~~~");
      Shell.getShell().OutputToShellln("The pushd Command:");
      Shell.getShell().OutputToShellln("");
      Shell.getShell().OutputToShellln("Usage: pushd DIRECTORY");
      Shell.getShell().OutputToShellln("");
      Shell.getShell().OutputToShellln("The pushd command takes the current directory"
          + " and saves it onto the directory stack. The current directory"
          + " will then change to the user-given DIRECTORY.");
      Shell.getShell().OutputToShellln("~~~~~~~~~~~~~~~~~~~~");
    } else if (command.equalsIgnoreCase("pwd")) {
      // ~~~~~~~~~~~~~~~~~~~ pwd ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      Shell.getShell().OutputToShellln("~~~~~~~~~~~~~~~~~~~~");
      Shell.getShell().OutputToShellln("The pwd Command:");
      Shell.getShell().OutputToShellln("");
      Shell.getShell().OutputToShellln("Usage: pwd");
      Shell.getShell().OutputToShellln("");
      Shell.getShell().OutputToShellln("The pwd command simply prints out the current "
          + "working directory (including its whole path).");
      Shell.getShell().OutputToShellln("~~~~~~~~~~~~~~~~~~~~");
    } else if (command.equalsIgnoreCase("speak")) {
      // ~~~~~~~~~~~~~~~~~~~ speak ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      Shell.getShell().OutputToShellln("~~~~~~~~~~~~~~~~~~~~");
      Shell.getShell().OutputToShellln("The speak Command:");
      Shell.getShell().OutputToShellln("");
      Shell.getShell().OutputToShellln("Usage: speak [STRING]");
      Shell.getShell().OutputToShellln("");
      Shell.getShell().OutputToShellln("The speak command will convert a user-given STRING"
          + " into audible speech output.");
      Shell.getShell().OutputToShellln("");
      Shell.getShell().OutputToShellln("The STRING parameter is optional. If excluded, the"
          + " speak command will then enter a state in which the user may"
          + " type in any input they wish, followed by the word QUIT (case-"
          + "sensitive) to have the output play.");
      Shell.getShell().OutputToShellln("~~~~~~~~~~~~~~~~~~~~");
    }    
  }
}
