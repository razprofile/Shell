// **********************************************************
// Assignment2:
// Student1:
// UTORID user_name: benhaimr
// UT Student #: 1006139830
// Author: Raz Ben Haim
//
// Student2:
// UTORID user_name: sharm697
// UT Student #: 1002352465
// Author: Sankalp Sharma
//
// Student3:
// UTORID user_name: voitovyc
// UT Student #: 1005735563
// Author: Oleksandr Voitovych
//
// Student4:
// UTORID user_name: meharch6
// UT Student #: 1003963570
// Author: Kevin Meharchand
//
//
// Honor Code: I pledge that this program represents my own
// program code and that I have coded on my own. I received
// help from no one in designing and debugging my program.
// I have also read the plagiarism section in the course info
// sheet of CSC B07 and understand the consequences.
// *********************************************************

package jShell;

import jShell.interfaces.*;

import java.util.Dictionary;
import java.util.Hashtable;

/**
 * The error class holds and handles all of the various 
 * error messages used throughout the shell.
 * 
 * @author Kevin Meharchand
 *
 */
public class Error implements IError{

  /** The dictionary HashMap that stores all of the possible errors and
   * their respective messages*/
  private Dictionary<String, String> messages = new Hashtable<String, String>();

  /**
   * Constructor for the Error class which initializes every possible error
   * message for use.
   */
  public Error() {
    // Errors for the general Shell
    messages.put("NOCOMMAND", "Error: Incorrect command entered.");
    messages.put("WRONGARGS", "Error: Incorrect number of arguments.");
    messages.put("INVALIDARGS", "Error: Argument type is incorrect.");
    // Errors for String formatting
    messages.put("BADSTRING",
        "Error: Please enter a correctly formatted "
            + "string (Begins and ends with double quotes, no double quotes"
            + " within).");
    // Errors for mkdir
    messages.put("EXISTS", "Error: File or directory already exists.");
    // Errors for Directory
    messages.put("NOCHILD",
        "Error: The file or path you specified could not" + " be found.");
    // Errors for cd and ls
    messages.put("BADPATH", "Error: Invalid path name.");
    messages.put("BADFILENAME", "Error: Invalid file name.");
    messages.put("BADDIRNAME", "Error: Invalid directory name");
    messages.put("PATHNOTFOUND", "Error: Path not found.");
    messages.put("DIRNOTFOUND", "Error: Directory not found.");
    messages.put("FILENOTFOUND", "Error: File not found.");
    // Errors for popd
    messages.put("EMPTYSTACK",
        "Error: There are no directories in the stack" + " to be popped.");
    // Errors for file naming
    messages.put("REMINDER", "Invalid characters in file names are: / ."
        + " ! @ # $ % ^ & * ( ) { } ~ | < > ?");
    // errors for history
    messages.put("LESSTHANZERO", "Error: Please Enter a non-negative number");
    // Errors for redirection
    messages.put("BADREDIR", "Error: Arguments for redirection are invalid.");
    messages.put("CANNOTDELETEROOT", "Error: Cannot Delete the root directory");
    // Errors for Rm
    messages.put("WORKINGDIR", "Error: Cannot delete current working directory.");
  }

  /**
   * Returns an appropriate error message based on the type of error encountered
   * 
   * @param ShellCommand The command which prompted an error to occur
   * @return an error message based on the type of error that occurred
   */
  public String errorMessage(String code) {

    String message;
    // Retrieve the appropriate message from the dictionary of messages
    message = messages.get(code);
    return message;
  }

  /*
   * //Testing for the Error class Error e = new Error();
   * public static void main (String[] args) { 
   * //Should return the appropriate message
   * System.out.println(e.errorMessage("EMPTYSTACK"));  
   * // We can assume that the error message key will always be correct as 
   * // no command can directly access the errorMessage method }
   */
}
