// **********************************************************
// Assignment2:
// Student1:
// UTORID user_name: benhaimr
// UT Student #: 1006139830
// Author: Raz Ben Haim
//
// Student2:
// UTORID user_name: sharm697
// UT Student #: 1002352465
// Author: Sankalp Sharma
//
// Student3:
// UTORID user_name: voitovyc
// UT Student #: 1005735563
// Author: Oleksandr Voitovych
//
// Student4:
// UTORID user_name: meharch6
// UT Student #: 1003963570
// Author: Kevin Meharchand
//
//
// Honor Code: I pledge that this program represents my own
// program code and that I have coded on my own. I received
// help from no one in designing and debugging my program.
// I have also read the plagiarism section in the course info
// sheet of CSC B07 and understand the consequences.
// *********************************************************


package jShell.commands;
import java.util.HashMap;
import jShell.interfaces.*;
import jShell.Path;


/**
 * Rm command removes a directory from a file system and all its contents. 
 * It gives an error when trying to delete current working directory or root.
 * 
 * @author Sankalp Sharma
 */


public class Rm extends Command {
	
  public Rm(IShell shell) {
	super(shell);
  }
  
  public String run(String[] args) {
    //parse the arguement and get currpath
    String delStr = args[1];
    String currPath = shell.getUserData().getCurPath().toString();
    
    //get the Node object that the user is trying to delete
    
    IFileSystemNode getNode = shell.getFileSystem().getNodeAtPath(new Path(delStr));
    
    //get the Abs path of the node to be Delete
    delStr = getNode.getPath().toString();
  
    /*
     * compare the path of node to be deleted and currPath and give an error
     * if user tries to delete the current working directory
     * */
    if (currPath.startsWith(delStr)) {
      shell.outputErrorMessage(this, delStr, "WORKINGDIR");
      return "";
    }
    
    //if everything is valid then pass delStr as a path onto removeDir
    IPath toDel = new Path(delStr);
    IFileSystemNode delNode = shell.getFileSystem().removeNode(toDel);
    return "";
  }

  @Override
  public HashMap<String, String> isValid(String[] args) {
    // TODO Auto-generated method stub
 // HashMap to map every argument by an error it caused
    HashMap<String, String> errors = new HashMap<String, String>();

    // Checking that correct number of arguments is passed
    if (args.length != 2) {
      errors.put("all", "WRONGARGS");
    }
    
    //check if user is trying delete root or trying to delete a directory
    //that doesn't exist
    Path path = new Path(args[1]);
    if (!path.isValidPath() || !path.isPathToDirectory()) {
      errors.put(args[1], "DIRNOTFOUND");
    }
   //trying to delete root
    if(args[1].equals("/")) {
      errors.put(args[1], "CANNOTDELETEROOT");
    }

    return errors;
  }
  

  @Override
  public String toString() {
    // TODO Auto-generated method stub
    return null;
  }

}
