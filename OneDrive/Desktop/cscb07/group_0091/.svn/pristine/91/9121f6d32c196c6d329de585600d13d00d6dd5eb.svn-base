// **********************************************************
// Assignment2:
// Student1:
// UTORID user_name: benhaimr
// UT Student #: 1006139830
// Author: Raz Ben Haim
//
// Student2:
// UTORID user_name: sharm697
// UT Student #: 1002352465
// Author: Sankalp Sharma
//
// Student3:
// UTORID user_name: voitovyc
// UT Student #: 1005735563
// Author: Oleksandr Voitovych
//
// Student4:
// UTORID user_name: meharch6
// UT Student #: 1003963570
// Author: Kevin Meharchand
//
//
// Honor Code: I pledge that this program represents my own
// program code and that I have coded on my own. I received
// help from no one in designing and debugging my program.
// I have also read the plagiarism section in the course info
// sheet of CSC B07 and understand the consequences.
// *********************************************************

package jShell.commands;

import jShell.Errors.ArgsNumberException;
import jShell.Errors.InvalidURLException;
import jShell.Errors.NodeExistsException;
import jShell.Errors.RedirectionOperatorsException;
import jShell.Errors.BadFileNameException;
import jShell.Errors.FileNotFoundException;
import jShell.Errors.InvalidPathException;
import jShell.interfaces.IDirectory;
import jShell.interfaces.IRedirection;
import jShell.interfaces.IShell;
import jShell.interfaces.IUrlDataFetcher;
import jShell.fileSystem.File;
import jShell.fileSystem.FileSystemNode;

public class Curl extends Command {

  private IUrlDataFetcher udf;

  public Curl(IUrlDataFetcher udf) {
    super();
    this.udf = udf;

  }

  @Override
  public String run(String[] args)
      throws ArgsNumberException, InvalidURLException, BadFileNameException, 
      InvalidPathException, NodeExistsException, RedirectionOperatorsException, 
      FileNotFoundException {
    // catch errors right away
    argChecker(args);
    // special case of ending with a slash
    String urlName = args[1];
    if (urlName.endsWith("/")) {
      throw new BadFileNameException(urlName);
    }
    String fileName = urlName.substring(urlName.lastIndexOf("/") + 1, 
        urlName.lastIndexOf("."));
    if (!FileSystemNode.nameChecker(fileName)) {
      throw new BadFileNameException(urlName);
    }
    String contents = udf.getUrlData(urlName);
    File f = new File(fileName);
    f.setContents(contents);
    IDirectory d = IShell.getShell().getUserData().getCurDir();

    if (d.ifChildExists(fileName)) {
      IRedirection r = IShell.getShell().getRedirection();
      r.fileHandling(">", fileName, contents);
    } else {
      d.tryAddChildren(f);
    }
    return "";

  }



  private void argChecker(String args[]) throws ArgsNumberException, 
  InvalidURLException {
    if (args.length != 2) {
      throw new ArgsNumberException();
    }
  }

  @Override
  public String toString() {

    return "curl";
  }

}