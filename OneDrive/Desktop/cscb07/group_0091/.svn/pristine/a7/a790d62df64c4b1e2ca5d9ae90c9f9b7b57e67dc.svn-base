// **********************************************************
// Assignment2:
// Student1:
// UTORID user_name: benhaimr
// UT Student #: 1006139830
// Author: Raz Ben Haim
//
// Student2:
// UTORID user_name: sharm697
// UT Student #: 1002352465
// Author: Sankalp Sharma
//
// Student3:
// UTORID user_name: voitovyc
// UT Student #: 1005735563
// Author: Oleksandr Voitovych
//
// Student4:
// UTORID user_name: meharch6
// UT Student #: 1003963570
// Author: Kevin Meharchand
//
//
// Honor Code: I pledge that this program represents my own
// program code and that I have coded on my own. I received
// help from no one in designing and debugging my program.
// I have also read the plagiarism section in the course info
// sheet of CSC B07 and understand the consequences.
// *********************************************************

package jShell.commands;

import jShell.interfaces.IDirectory;
import jShell.interfaces.IShell;
import jShell.UserData;
import jShell.errors.*;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.ObjectInputStream;

/**
 * Load class handles all operations related to load command, namely, checks 
 * if the arguments are valid arguments for load command and load the state of
 * Shell from the specified file in computer's memory
 * 
 * @author Sasha (Oleksandr)
 *
 */

public class Load extends Command{
  
  /**
   * Run load with given arguments
   * 
   * @param args Arguments for the load
   * @return output of load
   * @throws ArgsNumberException if number of arguments is invalid
   * @throws FileNotFoundException if file is not found at specified location
   * @throws UnknownErrorException if unknown unexpected error occurred (should
   *                               not ever occur)
   */
  @Override
  public String run(String[] args) 
      throws LoadNotFirstException, ArgsNumberException, FileNotFoundException,
      UnknownErrorException{
    if (!IShell.getShell().getUserData().getCommandHistory().isEmpty()) {
      throw new LoadNotFirstException();
    }
    if (args.length != 2) {
      throw new ArgsNumberException();
    }
    try {
      FileInputStream file = new FileInputStream(args[1]);
      ObjectInputStream in = new ObjectInputStream(file);
      IDirectory newRoot = (IDirectory)in.readObject();
      UserData newUD = (UserData)in.readObject();
      IShell.getShell().setUserData(newUD);
      IShell.getShell().getFileSystem().setRootDir(newRoot);
      in.close();
    } catch (IOException e) {
      throw new FileNotFoundException(args[1]);
    } catch (ClassNotFoundException e) {
      throw new UnknownErrorException();
    }
    return "";
  }

  /**
   * Returns the name of load command
   * 
   * @return the name of load command
   */
  @Override
  public String toString() {
    
    return "load";
  }
}
