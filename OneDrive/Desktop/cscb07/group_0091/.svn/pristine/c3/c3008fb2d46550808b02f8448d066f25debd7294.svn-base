package jShell;

public class Cat extends Command {
  /*
   * TO DO:
   * - Testing
   */

  private File[] files;

  @Override
  public void run(String[] args) {
    Error e = new Error();
    if (!isValid(args)) {
      return;
    }
    FileSystemNode temp; // Holds the current file to be added to the file array
    FileSystem f = Shell.getShell().getFileSystem();
    Path p;
    for (int i = 0; i < args.length; i++) {
      if (i > 0) { // Skip the first argument (the command call)
        /*
         * User can pass in either a full path, a relative path, or a file name which assumes
         * they're using their local directory
         */
        if (Path.isValidFullPath(args[i])) {
          // FULL PATH
          p = new Path(args[i]);
          temp = f.getNodeAtFullPath(p);
        } else if (Path.isValidRelativePath(args[i])) {
          // RELATIVE PATH
          p = new Path(args[i]);
          temp = f.getNodeAtRelativePath(p);
        } else {
          // FILE NAME: Check working directory for file
          // Retrieve the user's current directory
          p = Shell.getShell().getUserData().getCurPath();
          // Store this directory in a variable
          Directory d = (Directory) f.getNodeAtFullPath(p);
          // Use directory methods to look for the file name
          temp = d.getChild(args[i]);
        }
        if (!(temp == null)) {
          // If file exists, retrieve it
          this.files[i - 1] = (File) temp; // Store it in the files array
        } else {
          Shell.getShell().outputToShellln(e.errorMessage("FILENOTFOUND")
              + "(at " + args[i] + ")");
          return;
        }
      }
    }
    // File(s) has been retrieved
    printContents(Shell.getShell());
  }

  private boolean isValid(String[] args) {
    Error e = new Error();
    // No files provided
    if (args.length == 1) {
      Shell.getShell().outputToShellln(e.errorMessage("WRONGARGS") + " Please"
          + " include at least one file (or path to file).");
      return false;
    }
    // Add more errors as necessary
    return true;
  }

  private void printContents(Shell s) {
    /**
     * Prints out the contents of each file provided in the files array, with three line breaks
     * between each.
     * 
     */
    // Loop through the entire array
    for (File current : files) {
      // Get the contents of the file and print to the shell
      s.outputToShellln(current.getContents());
      // Add three line breaks between files
      s.outputToShellln("");
      s.outputToShellln("");
      s.outputToShellln("");
    }
  }
}
