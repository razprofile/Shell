package test;

import static org.junit.Assert.*;
import jShell.Errors.ArgsNumberException;
import jShell.Errors.BadFileNameException;
import jShell.Errors.FileNotFoundException;
import jShell.Errors.InvalidPathException;
import jShell.Errors.NodeExistsException;
import jShell.Errors.RedirectionOperatorsException;
import jShell.commands.Mkdir;
import jShell.fileSystem.Redirection;
import jShell.fileSystem.File;
import jShell.fileSystem.Path;
import jShell.Shell;
import org.junit.Test;
/**
 * Test cases for the Redirection class.
 * @author Kevin Meharchand
 *
 */
public class RedirectionTest {

  /*
   * This test file does not make use of mock objects. It is assumed that the
   * dependency between Redirection, Shell and other subsequent file system
   * classes is functional.
   */
  Shell s = new Shell();
  Redirection r = new Redirection();
  
  /*
   * Testing for the basic functionality of the redirection command.
   */
  @Test
  public void testFileHandling() throws InvalidPathException, NodeExistsException, BadFileNameException, RedirectionOperatorsException, FileNotFoundException {
    Path p = new Path("file");
    r.fileHandling(">", "file", "Contents");
    assertNotNull("Check if the file was created", s.getFileSystem().getNodeAtPath(p));
    File f = (File) s.getFileSystem().getNodeAtPath(p);
    assertEquals("Make sure the file's contents are correct", "Contents", f.getContents());
    Path p2 = new Path("file2");
    r.fileHandling(">>", "file2", "appended");
    assertNotNull("Check file creation with append", s.getFileSystem().getNodeAtPath(p2));
    File f2 = (File) s.getFileSystem().getNodeAtPath(p2);
    assertEquals("Make sure the file's contents are correct", "appended", f2.getContents());
  }
  
  /*
   * Testing for a bad redirection operator being passed into fileHandling
   */
  @Test(expected = RedirectionOperatorsException.class)
  public void testFileHandlingBadRedirOp() throws InvalidPathException, NodeExistsException, BadFileNameException, RedirectionOperatorsException, FileNotFoundException {
    Path p = new Path("file");
    r.fileHandling(">>>", "file", "Unimportant");
  }

  /*
   * Testing for a bad file name being passed into fileHandling
   */
  @Test(expected = BadFileNameException.class)
  public void testFileHandlingBadFilename() throws InvalidPathException, NodeExistsException, BadFileNameException, RedirectionOperatorsException, FileNotFoundException {
    Path p = new Path("file.txt");
    r.fileHandling(">", "file.txt", "Unimportant");
  }
  
  /*
   * Tests to ensure that redirection works when given paths to files as well
   */
  @Test
  public void testFileHandlingWithPath() throws InvalidPathException, NodeExistsException, ArgsNumberException, BadFileNameException, RedirectionOperatorsException, FileNotFoundException {
    Mkdir m = new Mkdir();
    String[] params = {"mkdir", "a"};
    m.run(params);
    Path p = new Path("a/file");
    r.fileHandling(">", "a/file", "contents");
    assertNotNull(s.getFileSystem().getNodeAtPath(p));
    File f = (File) s.getFileSystem().getNodeAtPath(p);
    assertEquals("Make sure the file's contents are correct", "contents", f.getContents());
  }
  
  /*
   * Tests for the checkRedirection method, used to ensure redirection 
   * argument validity before redirecting anything.
   */
  @Test
  public void testCheckRedirection() {
    assertEquals("Bad operator", false, r.checkRedirection(">>>", "file"));
    assertEquals("Bad filename", false, r.checkRedirection(">", "file.txt"));
    assertEquals("All good", true, r.checkRedirection(">", "file"));
  }
}
