package test;

import static org.junit.Assert.*;
import java.io.File;
import java.io.IOException;
import org.junit.After;
import org.junit.Test;
import org.junit.Before;
import jShell.Shell;
import jShell.UserData;
import jShell.Errors.ArgsNumberException;
import jShell.Errors.FileNotFoundException;
import jShell.Errors.LoadNotFirstException;
import java.io.ObjectOutputStream;
import java.util.LinkedList;
import java.util.Queue;
import java.io.FileOutputStream;
import jShell.commands.Load;
import jShell.fileSystem.Directory;
import jShell.fileSystem.FileSystem;
import jShell.fileSystem.Path;
import jShell.interfaces.IFileSystemNode;

public class LoadTest {
  
  File stateFile;
  private static final String FILEPATH = "state.txt";
  Shell sh;
  Load load;
  
  //Components to be recorded to the file and then used to load Shell
  Directory root;
  UserData ud;
  
  @Before
  public void init() {
    sh = new Shell();
    load = new Load();
    root = new Directory("");
    ud = new UserData(new Path("/"));
    
    //Creating a file for the state to be recorded
    stateFile = new File(FILEPATH);
    try {
      if (!stateFile.createNewFile()) {
        stateFile.delete();
        stateFile.createNewFile();
      };
    }catch(IOException e) {
      System.out.println("Error during initializing");
    }
  }
  
  @Test
  public void testLoadingEmptyShell() {
    String[] args = {"load", FILEPATH};
    try {      
      
      saveRootAndUserData();
      load.run(args);
      
      //Checking that all components of Shell were loaded correctly
      assertEquals(root.getName(), sh.getFileSystem().getRootDir().getName());
      assertTrue(sh.getFileSystem().getRootDir().getChildren().isEmpty());
      assertEquals(ud.getCurPath(), sh.getUserData().getCurPath());
      assertEquals(ud.getCommandHistory(), sh.getUserData().getCommandHistory());
      assertEquals(ud.getPathStack(), sh.getUserData().getPathStack());
      
    }catch(Exception e) {
      fail();
    }
  }
  
  @Test
  public void testLoadingShellWithCommandsExecuted(){
    String[] args = {"load", FILEPATH};
    try {
      //Adding commands to command history
      ud.getCommandHistory().add("first command");
      ud.getCommandHistory().add("second command");
      ud.getCommandHistory().add("third command");
      ud.getCommandHistory().add("forth command");
      
      saveRootAndUserData();
      load.run(args);
      
      //Checking that all components of Shell were loaded correctly
      assertEquals(sh.getFileSystem().getRootDir().getName(), "");
      assertTrue(sh.getFileSystem().getRootDir().getChildren().isEmpty());
      
      assertEquals(ud.getCurPath(), sh.getUserData().getCurPath());
      assertEquals(ud.getCommandHistory(), sh.getUserData().getCommandHistory());
      assertEquals(ud.getPathStack(), sh.getUserData().getPathStack());
      
    }catch (Exception e) {
      fail();
    }
  }
  
  @Test
  public void testLoadingShellWithNewDirectoriesAdded(){
    String[] args = {"load", FILEPATH};
    try {
      /*
       * Creating a mock file tree with root directory at root:
       * 
       *    \
       *        dir
       *            childDir
       *            file
       */
      Directory dir = new Directory("dir");
      Directory childDir = new Directory("childDir");
      jShell.fileSystem.File file = new jShell.fileSystem.File("file");
      root.tryAddChildren(dir);
      dir.tryAddChildren(childDir);
      dir.tryAddChildren(file);
      
      saveRootAndUserData();
      load.run(args);
      
      //Checking that all components of File System were loaded correctly
      assertEquals(sh.getFileSystem().getRootDir().getName(), "");
      assertEquals(1, sh.getFileSystem().getRootDir().getChildren().size());
      assertTrue(sh.getFileSystem().getRootDir().ifChildExists("dir"));
      
      assertTrue(sh.getFileSystem().getRootDir().getChild("dir").ifChildExists("childDir"));
      assertEquals(2, ((Directory)sh.getFileSystem().getRootDir().getChild("dir")).getChildren().size());
      assertTrue(sh.getFileSystem().getRootDir().getChild("dir").ifChildExists("file"));
      
      //Checking that all components of UserData are recorded correctly
      assertEquals(ud.getCurPath(), sh.getUserData().getCurPath());
      assertEquals(ud.getCommandHistory(), sh.getUserData().getCommandHistory());
      assertEquals(ud.getPathStack(), sh.getUserData().getPathStack());
      
    }catch (Exception e) {
      fail();
    }
  }
  
  @Test
  public void testLoadingShellWithNonEmptyStackPath(){
    String[] args = {"load", FILEPATH};
    try {
      //Adding commands to command history
      ud.getPathStack().add(new Path("first path"));
      ud.getPathStack().add(new Path("second path"));
      ud.getPathStack().add(new Path("third path"));
      ud.getPathStack().add(new Path("forth path"));
      
      saveRootAndUserData();
      load.run(args);
      
      //Checking that all components of File System were loaded correctly
      assertEquals(sh.getFileSystem().getRootDir().getName(), "");
      assertEquals(0, sh.getFileSystem().getRootDir().getChildren().size());

      //Checking that all components of UserData are recorded correctly
      assertEquals(ud.getCurPath(), sh.getUserData().getCurPath());
      assertEquals(ud.getCommandHistory(), sh.getUserData().getCommandHistory());
      assertEquals(ud.getPathStack(), sh.getUserData().getPathStack());
      
    }catch (Exception e) {
      fail();
    }
  }
  
  @Test
  public void testLoadingShellWithNonTrivialCurPath(){
    String[] args = {"load", FILEPATH};
    try {
      //Setting current path to /dir
      ud = new UserData(new Path("/dir"));
      
      saveRootAndUserData();
      load.run(args);
      
      //Checking that all components of File System were loaded correctly
      assertEquals(sh.getFileSystem().getRootDir().getName(), "");
      assertEquals(0, sh.getFileSystem().getRootDir().getChildren().size());
      
      //Checking that all components of UserData are recorded correctly
      assertEquals(ud.getCurPath(), sh.getUserData().getCurPath());
      assertEquals(ud.getCommandHistory(), sh.getUserData().getCommandHistory());
      assertEquals(ud.getPathStack(), sh.getUserData().getPathStack());
      
    }catch (Exception e) {
      fail();
    }
  }
  
  @Test
  public void testLoadNoArgs() {
    String[] args = {"load"};
    try{
      load.run(args);
      fail();
    }catch(ArgsNumberException e) {
      
    }catch(Exception e) {
      fail();
    }
  }
  
  @Test
  public void testLoadCallWithWrongNumberArgs() {
    
    String args[] = {"load", FILEPATH, "extra/argument"};
    
    try {
      load.run(args);
      fail();
    }catch(ArgsNumberException e) {
      
    }catch(Exception e) {
      fail();
    }
    
  }
  
  @Test
  public void testLoadInvalidPath() {
    
    String args[] = {"load", "this/is/invalid/path"};
    
    try {
      load.run(args);
      fail();
    }catch(FileNotFoundException e) {
      
    }catch(Exception e) {
      fail();
    }
    
  }
  
  @Test
  public void testLoadNotFirstCommand() {
    
    sh.getUserData().getCommandHistory().add("this command was executed before load");
    String args[] = {"load", FILEPATH};
    
    try {
      load.run(args);
      fail();
    }catch(LoadNotFirstException e) {
      
    }catch(Exception e) {
      fail();
    }
    
  }
  
  @After
  public void unInit() {
    
    //Cleaning FileSystem from potential created nodes
    Queue<IFileSystemNode> toDelete = new LinkedList<>();
    for (IFileSystemNode node : FileSystem.getFileSystem().getRootDir().getChildren()) {
      toDelete.add(node);
    }
    for (IFileSystemNode node : toDelete) {
      FileSystem.getFileSystem().getRootDir().removeChild(node);
    }
    
    //Cleaning global variables
    root = null;
    ud = null;
    stateFile.delete();
  }
  
  private void saveRootAndUserData() {
    try {
      //Opening an input stream
      FileOutputStream stream = new FileOutputStream(stateFile);
      ObjectOutputStream out = new ObjectOutputStream(stream);
    
      //Writing root directory and user data
      out.writeObject(root);
      out.writeObject(ud);
      
      //Closing input stream
      out.close();
      stream.close();
    }catch(Exception e) {
      return;
    }
  }
  
}
