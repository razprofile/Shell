package jShell;

import java.util.Arrays;

//import java.util.*;

public class Path {
	
	// Textual representation of the path
	String path;
	
	public Path(String path) {
		
		this.path = path;
	}	
	
	/**
	 * Return textual representation of the path
	 * 
	 * @return string corresponding to path
	 */
	public String toString() {
		
		return path;
		
	}
	
	/**
	 * Checks if path is equal to arbitrary object p. If p is a path, checks whenever they point
	 * to the same location in the file tree.
	 * 
	 * @param p potentialPath 
	 * @return true p is equal to path
	 */
	public boolean equals(Object p) {
		//If p is not Path, return false
		if (!(p instanceof Path)) {
			return false;
		}
		
		//If p is intance of Path, compare the locations they point to in the file tree 
		return this.path.toString().equals(p.toString());
	}
	
	
	public Path clone() {
		return new Path(this.path);
	}
	
	
	/**
	 * Checks if path is a valid full path to pointing to existing location in 
	 * current file system.
	 * 
	 * @return true if string is valid full path; false is not full path
	 */
	public boolean isValidFullPath() {
		
		//If path is empty or first character is not /, then it's a relative path, not full path.
		if (this.path.isEmpty() || this.path.charAt(0) != '/') {
			return false;
		}
		
		/*
		 * Checking if location exists in the current file tree
		 */
		String[] sequenceOfLocations = this.getSequence();
		FileSystemNode currDir = (Directory)Shell.getShell().getFileSystem().getRootDir();
		
		for (String dirName : sequenceOfLocations) {
			if (dirName.equals("..")) {
				currDir = Shell.getShell().getFileSystem().getParent((Directory)currDir);
			}else if (!dirName.equals(".")){
				if (!currDir.ifChildExists(dirName)) {
					return false;
				};
			
				currDir = ((Directory) currDir).getChild(dirName);
			}
		}
		
		return true;
		
	}
	
	/**
	 * Checks if path is a valid relative path
	 * 
	 * @return true if string is valid relative path; false is not relative path
	 */
	public boolean isValidRelativePath() {
		
		//Empty path is considered valid relative path!
		if (this.path.isEmpty()) {
			return true;
		}
		
		//Path that starts with / is a full path, not relative
		if (this.path.charAt(0) == '/') {
			return false;
		}
		
		//Getting the full path to the same location
		Path fullPath = Path.convertRelativeToFull(this);
		return fullPath.isValidFullPath();
		
	}

	/**
	 * Checks if path is a valid full or relative path
	 * 
	 * @return true if string is valid relative or full path; false if is not relative or full path
	 */
	public boolean isValidPath() {
		
		return (this.isValidFullPath() || this.isValidRelativePath());
		
	}
	
	/**
	 * Checks if path ends with a directory. If path is not valid, return false.
	 * 
	 * @return true if path is valid and ends with a directory
	 */
	public boolean isPathToDirectory() {
		
		FileSystemNode bottom = Shell.getShell().getFileSystem().getNodeAtPath(this);
		return bottom instanceof Directory;
		
	}
	
	/**
	 * This method splits the path into the sequence of directories/files
	 * 
	 * @return the array of names of the directories/files in the path path
	 */
	public String[] getSequence() {
		
		String[] sequence = {};
		
		//If path is not empty, split it. If path is empty, return empty sequence
		if (!this.toString().isEmpty()) {
			sequence = this.toString().split("/", -1);
		}
		
		//If first or/and last location are equal to empty string, omit them
		if (sequence.length!=0 && sequence[0].isEmpty()) {
		  //First location is empty; remove first element
		  sequence = Arrays.copyOfRange(sequence, 1, sequence.length);
		}
		
		if (sequence.length!=0 && sequence[sequence.length - 1].isEmpty()) {
		  //Last location is empty; remove last element
          sequence = Arrays.copyOfRange(sequence, 0, sequence.length - 1);
		}
		
		return sequence;
		
	}
	
	
	/**
	 * This method returns the path to the parent directory of the node at current path assuming 
	 * that path is of valid format
	 * 
	 * @return the string corresponding to the path of parent directory
	 */
	public Path getParentPath() {
		
		//Getting the index where last directory begins
		int bottomDir = Path.removeLastSlash(this).toString().lastIndexOf('/');
		
		//
		
		/*
		 * If path has no slashes, it's a relative path which is either empty or contains single directory.
		 * In both cases path to parent directory is a relative path and is ""
		 */
		if (bottomDir == -1) {
			return new Path("");
		}
		
		/*
		 * If path has exactly one slash and it's first character, it's a full path which is either path
		 *  to a root directory, or contains single directory. In both cases path to parent directory is
		 *  a full path to root directory and is equal to /
		 */
		if (bottomDir == 0) {
			return new Path("/");
		}
			
		
		//The path without the bottom directory i.e. the path to parent directory
		Path parentPath = new Path(this.path.substring(0, bottomDir));
		return parentPath;
		
	}
	
	
	/**
	 * Return the name of bottom file or directory of the path path, if bottom file or directory exists.
	 * Otherwise, return empty string.
	 * 
	 * @return name of bottom file or directory
	 */
	public String getBottomName() {
		
	    Path pathWithoutLastSlash = Path.removeLastSlash(this);
		int begin = pathWithoutLastSlash.toString().lastIndexOf('/');
		return pathWithoutLastSlash.toString().substring(begin + 1);
		
	}
	
	/** Return the result of appending name of the node to the path 
	 * 
	 * 
	 * @param path path
	 * @param nodeName name of the node
	 * @return result of appending nodeName to path
	 */
	public static Path appendNodeName(Path path, String nodeName) {
		
		Path pathToBeAppended = new Path(nodeName);
		return Path.concatPaths(path, pathToBeAppended);
		
	}
	
	
	/**
	 * Converts relative path to full path.
	 * 
	 * @param relative relative path
	 * @return full path to the same location
	 */
	public static Path convertRelativeToFull(Path relative) {
		
		Path workingDirectory = Shell.getShell().getUserData().getCurPath();
		
		//Append relative path to the path or current working directory to make it a full path
		return Path.concatPaths(workingDirectory, relative);
		
	}
	
	
	/**
	 * Method to remove leading slash or multiple slashes from path.
	 * 
	 * @param path path
	 * @return path without leading slashes
	 */
	private static Path removeLeadingSlash(Path path) {
		int index = 0;
		if (index < path.toString().length() && path.toString().charAt(index) == '/') {
			index++;
		}
		
		return new Path (path.toString().substring(index));	
	}
	
	/**
	 * Method to remove last slash from path.
	 * 
	 * @param path path
	 * @return path without last slash
	 */
	private static Path removeLastSlash(Path path) {
		
		int index = path.toString().length() - 1;
		if(index > -1 && path.toString().charAt(index) == '/') {
			index--;
		}
		
		return new Path(path.toString().substring(0, index + 1));
		
	}
	
	/**
	 * Method to get the result of concatenation two paths.
	 * 
	 * @param p1 first path
	 * @param p2 first path
	 * @return path, which is a result of concatenation of p1 and p2 in this order
	 */
	private static Path concatPaths(Path p1, Path p2) {
		
		/*
		 * To ensure that concatenation does not generate extra slash symbols on the edge of concatenation, 
		 * remove last slashes from first path and leading slashes from second path
		 */
		String str1 = Path.removeLastSlash(p1).toString();
		String str2 = Path.removeLeadingSlash(p2).toString();
		
		//Insert a slash symbol between strings corresponding to first path and second path, and return resulting path
		return new Path(str1 + "/" + str2);
		
	}
	
	public static void main(String args[]) {
	  
	  Shell shell = new Shell();
	  FileSystem f = shell.getFileSystem();
	  
	  Path p = new Path("/b/");
	  System.out.println(p.getSequence().length);
	  
	  Directory dir = f.createNewDirectory(p);
	  System.out.println(dir.getName());
	  
	}
}